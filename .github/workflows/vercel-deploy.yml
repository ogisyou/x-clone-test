name: Vercel Next.js Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
      NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
      NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
      NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
      NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
      NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
      NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}

    steps:
      - uses: actions/checkout@v3

      - name: Node.js のセットアップ
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Vercel CLI のインストールと更新
        run: |
          npm install -g vercel@latest
          vercel --version

      - name: デバッグ情報の表示
        run: |
          echo "Vercel Token is set: ${{ secrets.VERCEL_TOKEN != '' }}"
          echo "Vercel Project ID: $VERCEL_PROJECT_ID"
          echo "Vercel Org ID: $VERCEL_ORG_ID"
          echo "Firebase Config is set: ${{ secrets.FIREBASE_CONFIG != '' }}"

      - name: ビルドキャッシュのクリア
        run: |
          echo "ビルドキャッシュをクリアしています..."
          curl -X POST ${{ secrets.VERCEL_DEPLOY_HOOK_URL }}
          echo "デプロイフックをトリガーしました。新しいビルドが開始されます。"
          sleep 30  # デプロイフックが処理されるのを待つ

      - name: Vercel へのデプロイ
        env:
          FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
        run: |
          echo "Vercel デプロイを開始します..."
          vercel pull --yes --environment=production --token ${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token ${{ secrets.VERCEL_TOKEN }}
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token ${{ secrets.VERCEL_TOKEN }})
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
          echo "デプロイされた URL: $DEPLOYMENT_URL"

      - name: デプロイメントチェック
        if: env.DEPLOYMENT_URL
        run: |
          echo "チェックする本番URL: https://x-clone-test.vercel.app"
          for i in {1..30}; do
            prod_status=$(curl -s -o /dev/null -w "%{http_code}" https://x-clone-test.vercel.app/api/health)
            echo "本番URL status: $prod_status"
            if [[ "$prod_status" =~ ^(200|204)$ ]]; then
              echo "デプロイメントが成功しました。"
              exit 0
            fi
            echo "Waiting for deployment... (Attempt $i of 30)"
            sleep 10
          done
          echo "デプロイメントが失敗しました。タイムアウトまたはエラーが発生しました。"
          exit 1

      - name: デプロイメント状態の確認
        if: failure()
        run: |
          echo "デプロイメント状態を確認しています..."
          vercel inspect https://x-clone-test.vercel.app --token ${{ secrets.VERCEL_TOKEN }}

      - name: Vercel デプロイログの確認
        if: always()
        run: |
          echo "デプロイメントログを確認しています..."
          vercel logs https://x-clone-test.vercel.app --token ${{ secrets.VERCEL_TOKEN }} --limit 50

      - name: エラー時の詳細情報収集
        if: failure()
        run: |
          echo "エラー時の詳細情報を収集しています..."
          curl -s https://x-clone-test.vercel.app/api/health | jq .
          vercel logs https://x-clone-test.vercel.app --token ${{ secrets.VERCEL_TOKEN }} --limit 20