name: Functions と Vercel のデプロイ

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Node.js のセットアップ
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: 環境変数の設定
        run: |
          echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}" >> $GITHUB_ENV
          echo "MY_FIREBASE_PROJECT_ID=${{ secrets.MY_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
          echo "MY_FIREBASE_CLIENT_EMAIL=${{ secrets.MY_FIREBASE_CLIENT_EMAIL }}" >> $GITHUB_ENV
          echo "MY_FIREBASE_PRIVATE_KEY='${{ secrets.MY_FIREBASE_PRIVATE_KEY }}'" >> $GITHUB_ENV

      - name: 依存関係のキャッシュ
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: ルートの依存関係をインストール
        run: npm ci

      - name: Firebase CLI のインストール
        run: npm install -g firebase-tools

      - name: Next.js アプリのビルド
        run: npm run build:next
        env:
          CI: true

      - name: Functions のインストールとビルド
        run: |
          cd functions
          npm ci
          npm run build
          cp -r lib/* .

      - name: vercel.json の確認
        run: |
          if [ -f vercel.json ]; then
            echo "vercel.json が存在します。内容:"
            cat vercel.json
          else
            echo "vercel.json が存在しません。基本的な vercel.json ファイルを作成します。"
            echo '{
              "version": 2,
              "builds": [
                {
                  "src": "package.json",
                  "use": "@vercel/next"
                }
              ]
            }' > vercel.json
          fi

      - name: Firebase プロジェクトの設定
        run: firebase use ${{ secrets.MY_FIREBASE_PROJECT_ID }} --token "${{ secrets.FIREBASE_TOKEN }}"

      - name: Firebase 設定のデバッグ
        run: |
          echo "Firebase プロジェクトリスト:"
          firebase projects:list --token "${{ secrets.FIREBASE_TOKEN }}"
          echo "現在のプロジェクト設定:"
          firebase use --token "${{ secrets.FIREBASE_TOKEN }}"

      - name: Firebase Functions のデプロイ
        run: firebase deploy --only functions --project ${{ secrets.MY_FIREBASE_PROJECT_ID }} --token "${{ secrets.FIREBASE_TOKEN }}"

      - name: Functions URL の取得
        run: |
          FUNCTIONS_URL=$(firebase functions:httpsurl deleteUser --project ${{ secrets.MY_FIREBASE_PROJECT_ID }} --token "${{ secrets.FIREBASE_TOKEN }}") || echo "Functions URL の取得に失敗しました"
          echo "Functions URL: $FUNCTIONS_URL"
          echo "FUNCTIONS_URL=$FUNCTIONS_URL" >> $GITHUB_ENV

      - name: 更新前の vercel.json のデバッグ
        run: cat vercel.json

      - name: vercel.json を Functions URL で更新
        run: |
          if [ -n "$FUNCTIONS_URL" ]; then
            cp vercel.json vercel.json.bak
            jq --arg url "$FUNCTIONS_URL" '.rewrites[0].destination = $url' vercel.json > vercel.json.tmp && mv vercel.json.tmp vercel.json
            echo "更新された vercel.json の内容:"
            cat vercel.json
          else
            echo "警告: Functions URL で vercel.json の更新に失敗しました"
          fi

      - name: vercel.json の検証
        run: |
          if jq empty vercel.json 2>/dev/null; then
            echo "vercel.json は有効な JSON です。"
          else
            echo "vercel.json は有効な JSON ではありません。内容:"
            cat vercel.json
            exit 1
          fi

      - name: Vercel へのデプロイ
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npx vercel pull --yes --environment=production --token $VERCEL_TOKEN
          npx vercel build --prod --token $VERCEL_TOKEN
          DEPLOYMENT_URL=$(npx vercel deploy --prebuilt --prod --token $VERCEL_TOKEN)
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
          echo "デプロイメント URL: $DEPLOYMENT_URL"

      - name: デプロイメントチェック
        run: |
          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "エラー: デプロイメント URL が設定されていません"
            exit 1
          fi
          echo "チェックする URL: $DEPLOYMENT_URL"
          HTTP_RESPONSE=$(curl -s -I $DEPLOYMENT_URL)
          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | grep HTTP | awk '{print $2}')
          echo "HTTP ステータスコード: $HTTP_STATUS"
          echo "レスポンスヘッダー:"
          echo "$HTTP_RESPONSE"
          if [ $HTTP_STATUS = "200" ] || [ $HTTP_STATUS = "404" ]; then
            echo "デプロイメントが成功しました。ステータスコード: $HTTP_STATUS"
          else
            echo "デプロイメントが失敗しました。ステータスコード: $HTTP_STATUS"
            echo "レスポンスボディ:"
            curl -s $DEPLOYMENT_URL
            exit 1
          fi