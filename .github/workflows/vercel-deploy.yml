name: Deploy Functions and Vercel

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Set up environment variables
        run: |
          echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}" >> $GITHUB_ENV
          echo "MY_FIREBASE_PROJECT_ID=${{ secrets.MY_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
          echo "MY_FIREBASE_CLIENT_EMAIL=${{ secrets.MY_FIREBASE_CLIENT_EMAIL }}" >> $GITHUB_ENV
          echo "MY_FIREBASE_PRIVATE_KEY='${{ secrets.MY_FIREBASE_PRIVATE_KEY }}'" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Install root dependencies
        run: npm ci

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Build Next.js app
        run: npm run build:next
        env:
          CI: true

      - name: Install and Build Functions
        run: |
          cd functions
          npm ci
          npm run build
          cp -r lib/* .

      - name: Set Firebase project
        run: firebase use ${{ secrets.MY_FIREBASE_PROJECT_ID }} --token "${{ secrets.FIREBASE_TOKEN }}"

      - name: Debug Firebase config
        run: |
          echo "Firebase project list:"
          firebase projects:list --token "${{ secrets.FIREBASE_TOKEN }}"
          echo "Current project config:"
          firebase use --token "${{ secrets.FIREBASE_TOKEN }}"

      - name: Deploy Firebase Functions
        run: firebase deploy --only functions --project ${{ secrets.MY_FIREBASE_PROJECT_ID }} --token "${{ secrets.FIREBASE_TOKEN }}"

      - name: Update vercel.json with Functions URL
        run: |
          FUNCTIONS_URL=$(firebase functions:config:get deploy.url.production --token "${{ secrets.FIREBASE_TOKEN }}") || echo "Failed to get Functions URL"
          echo "Functions URL: $FUNCTIONS_URL"
          if [ -n "$FUNCTIONS_URL" ]; then
            sed -i 's|https://us-central1-${{ secrets.MY_FIREBASE_PROJECT_ID }}.cloudfunctions.net|'"$FUNCTIONS_URL"'|g' vercel.json
          else
            echo "Warning: Failed to update vercel.json with Functions URL"
          fi

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npx vercel pull --yes --environment=production --token $VERCEL_TOKEN
          npx vercel build --prod --token $VERCEL_TOKEN
          DEPLOYMENT_URL=$(npx vercel deploy --prebuilt --prod --token $VERCEL_TOKEN)
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
          echo "デプロイメントURL: $DEPLOYMENT_URL"

      - name: Deployment check
        run: |
          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "エラー: デプロイメントURLが設定されていません"
            exit 1
          fi
          echo "チェックするURL: $DEPLOYMENT_URL"
          HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" $DEPLOYMENT_URL)
          echo "HTTP ステータスコード: $HTTP_STATUS"
          if [ $HTTP_STATUS = "200" ] || [ $HTTP_STATUS = "404" ]; then
            echo "デプロイメントが成功しました。ステータスコード: $HTTP_STATUS"
          else
            echo "デプロイメントが失敗しました。ステータスコード: $HTTP_STATUS"
            exit 1
          fi